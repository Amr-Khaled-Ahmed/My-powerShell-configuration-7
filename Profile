# Initialize Oh My Posh with Default Theme
# Example themes already initialized (Uncomment as needed)
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\json.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\cloud-native-azure.omp.json' | Invoke-Expression
oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\atomicBit.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\chips.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\dracula.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\if_tea.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\sonicboom_dark.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\atomic.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\blue-owl.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\bubbles.omp.json' | Invoke-Expression
# oh-my-posh init pwsh --config 'C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\devious-diamonds.omp.json' | Invoke-Expression

# Import functionality
Import-Module PSFzf
Import-Module PSWindowsUpdate
# Import-Module PSColor
Import-Module PSReadLine
Set-PSReadLineOption -PredictionSource History
Import-Module -Name Terminal-Icons
Import-Module PSGitHub



# Define a function to switch themes dynamically
function Set-PoshTheme {
    param (
        [Parameter(Mandatory)]
        [string]$Theme
    )
    $themePath = "C:\Users\Amr khaled\AppData\Local\Programs\oh-my-posh\themes\$Theme.omp.json"
    if (Test-Path $themePath) {
        oh-my-posh init pwsh --config $themePath | Invoke-Expression
        Write-Host "Switched to theme: $Theme" -ForegroundColor Green
    } else {
        Write-Host "Theme '$Theme' not found!" -ForegroundColor Red
    }
}

# Menu to switch themes dynamically with fuzzy search
function Choose-PoshTheme {
    $themes = @(
    "jandedobbeleer",
    "chips",
    "dracula",
    "if_tea",
    "sonicboom_dark",
    "atomic",
    "blue-owl",
    "bubbles",
    "devious-diamonds",
    "cloud-native-azure",
    "mario",
    "powerline",
    "paradox",
    "pure",
    "snowy-night",
    "tango",
    "vscode",
    "powerline-v2",
    "crystal",
    "horizon",
    "sphinx",
    "old-skool",
    "seabird",
    "new-age",
    "macchiato",
    "react",
    "dracula-dark",
    "frodo",
    "night-owl",
    "1_shell",
    "agnoster.minimal",
    "agnoster",
    "agnosterplus",
    "aliens",
    "amro",
    "atomicBit",
    "avit",
    "blueish",
    "bubblesextra",
    "bubblesline",
    "capr4n",
    "catppuccin_frappe",
    "catppuccin_latte",
    "catppuccin_macchiato",
    "catppuccin_mocha",
    "catppuccin",
    "cert",
    "cinnamon",
    "clean-detailed",
    "cloud-context",
    "cobalt2",
    "craver",
    "darkblood",
    "di4am0nd",
    "easy-term",
    "emodipt-extend",
    "emodipt",
    "fish",
    "free-ukraine",
    "froczh",
    "gmay",
    "grandpa-style",
    "gruvbox",
    "half-life",
    "honukai",
    "hotstick.minimal",
    "hul10",
    "hunk",
    "huvix",
    "illusi0n",
    "iterm2",
    "jblab_2021",
    "jonnychipz",
    "json",
    "jtracey93",
    "jv_sitecorian",
    "kali",
    "kushal",
    "lambda",
    "lambdageneration",
    "larserikfinholt",
    "lightgreen",
    "M365Princess",
    "marcduiker",
    "markbull",
    "material",
    "microverse-power",
    "mojada"
)

    Write-Host "Available Themes:" -ForegroundColor Cyan
    $themes | fzf --preview 'echo {}' --preview-window=up:20 | ForEach-Object {
        Set-PoshTheme -Theme $_
    }
}




# Aliases for common commands
Set-Alias posh-theme Choose-PoshTheme
Set-Alias tt tree
Set-Alias gnip Get-NetIPAddress
Set-Alias vim nvim
Set-Alias alies Get-Alias
Set-Alias edit notepad
Set-Alias pscan Test-NetConnection  # Alias for testing network connections

# Functions for extended functionality
# network analyzer
Function getip { Get-NetIPAddress | Where-Object { $_.AddressFamily -eq 'IPv4' } }
function get-public-ip {
    $publicIP = (Invoke-RestMethod -Uri "https://api.ipify.org").ip
    Write-Output "Public IP: $publicIP"
}
Set-Alias publicip get-public-ip
function recon {
    param (
        [string]$target
    )
    nmap -sS -A -T4 $target
}
Set-Alias nmap-scan recon

# File and directory operations
Function ll { Get-ChildItem -Force | Sort-Object Name }
Function lsr { Get-ChildItem -Recurse -Force }
Function gs { Get-Service }
Function md { New-Item -ItemType Directory }
Function netinfo { Get-NetAdapter | Select-Object Name, Status, MacAddress, LinkSpeed }
Function pingtest { Test-Connection -Count 4 }
Function ports { Get-NetTCPConnection | Select-Object LocalAddress, LocalPort, RemoteAddress, RemotePort, State }
Function size { Get-ChildItem -Recurse | Measure-Object -Property Length -Sum | Select-Object Count, Sum }
Function tree { Get-ChildItem -Recurse -Force | Format-Table FullName, Attributes }
Function listusers { Get-LocalUser }
Function groups { Get-LocalGroupMember -Group "Administrators" }
Function clsrv { Clear-DnsClientCache }
Function cpuinfo { Get-WmiObject Win32_Processor | Select-Object Name, NumberOfCores, MaxClockSpeed }
Function raminfo { Get-WmiObject Win32_PhysicalMemory | Select-Object Manufacturer, Capacity, Speed }
Function sysinfo { Get-ComputerInfo | Select-Object CsName, WindowsVersion, OsArchitecture, CsManufacturer, CsModel }
function check-disk {
    Get-PSDrive | Where-Object { $_.Used -ne $null } | Select-Object Name, @{n="Used (GB)";e={[math]::Round($_.Used/1GB,2)}}, @{n="Free (GB)";e={[math]::Round($_.Free/1GB,2)}}
}
Set-Alias disk check-disk

# Function for general search
function search {
    param (
        [string]$path = "C:\,D:\" # Default search paths
    )
    $searchPaths = $path -split "," # Handle multiple paths if provided as a comma-separated list
    Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf
}

# Function for fuzzy search with preview
function fuzzysearch {
    param (
        [string]$path = "C:\,D:\" # Default search paths
    )
    $searchPaths = $path -split ","
    Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf --preview="type {}"
}
Set-Alias fs fuzzysearch

# Function for fuzzy search for directories
function fuzzydirs {
    param (
        [string]$path = "C:\,D:\" # Default search paths
    )
    $searchPaths = $path -split ","
    Get-ChildItem -Path $searchPaths -Recurse -Directory -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf
}
Set-Alias fd fuzzydirs

# Function for fuzzy search by file extension
function fuzzyext {
    param (
        [string]$ext = "*.txt",   # Default file extension
        [string]$path = "C:\,D:\" # Default search paths
    )
    $searchPaths = $path -split ","
    Get-ChildItem -Path $searchPaths -Recurse -File -Include $ext -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf
}
Set-Alias fx fuzzyext

# Function for opening a file
function openfile {
    param (
        [string]$path = "C:\,D:\" # Default search paths
    )
    $searchPaths = $path -split ","
    Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf | ForEach-Object { code $_ }
}
Set-Alias fof openfile

# Function for search with preview
function searchpreview {
    param (
        [string]$path = "C:\,D:\" # Default search paths
    )
    $searchPaths = $path -split ","
    Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf --preview="if ($env:OS -eq 'Windows_NT') { type {} | Out-String } else { cat {} }"
}
Set-Alias fsp searchpreview

# Function to copy file paths
function copyfilepath {
    param (
        [string]$path = "C:\,D:\" # Default search paths
    )
    $searchPaths = $path -split ","
    Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf | Set-Clipboard
}
Set-Alias fcfp copyfilepath

# Function for recent files
function recentfiles {
    param (
        [int]$days = 7,           # Default days
        [string]$path = "C:\,D:\" # Default search paths
    )
    $searchPaths = $path -split ","
    Get-ChildItem -Path $searchPaths -Recurse -File -ErrorAction SilentlyContinue | Where-Object { $_.LastWriteTime -ge (Get-Date).AddDays(-$days) } | ForEach-Object { $_.FullName } | fzf
}
Set-Alias frf recentfiles

# Function for searching text using ripgrep
function searchtext {
    param (
        [string]$query,
        [string]$path = "C:\,D:\" # Default search paths
    )
    rg --files-with-matches $query $path | fzf
}
Set-Alias fst searchtext

# Function to open folders
function openfolder {
    param (
        [string]$path = "C:\,D:\" # Default search paths
    )
    $searchPaths = $path -split ","
    Get-ChildItem -Path $searchPaths -Recurse -Directory -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName } | fzf | ForEach-Object { Start-Process explorer $_ }
}
Set-Alias fofd openfolder

function open {
    param (
        [string]$path = "C:\,D:\",  # Default search path
        [switch]$o,                 # Open the selected file or directory
        [switch]$p                  # Display the selected path
    )

    # Determine if the path is a file or directory
    if (Test-Path -Path $path -PathType Leaf) {
        if ($o) {
            # Open the file in nvim
            nvim $path
        } elseif ($p) {
            # Output the file path
            Write-Output $path
        }
    } elseif (Test-Path -Path $path -PathType Container) {
        # If it's a directory, allow selection of files/directories without preview
        $selection = Get-ChildItem -Path $path -Recurse -Force -ErrorAction SilentlyContinue | 
            ForEach-Object { $_.FullName } | 
            fzf

        if ($selection) {
            if ($o) {
                if (Test-Path -Path $selection -PathType Leaf) {
                    # Open file in nvim
                    nvim $selection
                } elseif (Test-Path -Path $selection -PathType Container) {
                    # Open directory in Explorer
                    Start-Process explorer $selection
                }
            } elseif ($p) {
                # Output the selected path
                Write-Output $selection
            }
        }
    } else {
        # Default behavior: search in C:\ and D:\ if no valid path is specified
        $selection = Get-ChildItem -Path C:\,D:\ -Recurse -Force -ErrorAction SilentlyContinue | 
            ForEach-Object { $_.FullName } | 
            fzf

        if ($selection) {
            if ($o) {
                if (Test-Path -Path $selection -PathType Leaf) {
                    # Open file in nvim
                    nvim $selection
                } elseif (Test-Path -Path $selection -PathType Container) {
                    # Open directory in Explorer
                    Start-Process explorer $selection
                }
            } elseif ($p) {
                # Output the selected path
                Write-Output $selection
            }
        }
    }
}







# more alies for Cybersecurity usage
function gethash {
    param (
        [string]$file
    )
    Get-FileHash -Path $file | Format-Table Algorithm, Hash
}
Set-Alias gh gethash

function msf-payload {
    param (
        [string]$type = "windows/meterpreter/reverse_tcp",
        [string]$lhost = "127.0.0.1",
        [int]$lport = 4444,
        [string]$output = "payload.exe"
    )
    msfvenom -p $type LHOST=$lhost LPORT=$lport -f exe > $output
}
Set-Alias payload msf-payload



# run programs


function run-asm {
    param (
        [string]$file
    )
    nasm -f win32 $file -o ${file}.obj && gcc -m32 ${file}.obj -o ${file}.exe && .\${file}.exe
}
Set-Alias rasm run-asm

function run-cpp {
    param (
        [string]$file
    )
    $filename = [System.IO.Path]::GetFileNameWithoutExtension($file)
    $dir = [System.IO.Path]::GetDirectoryName((Get-Item -Path $file).FullName)
    $cppFiles = Get-ChildItem -Path $dir -Filter "*.cpp" | ForEach-Object { $_.FullName }
    g++ $cppFiles -o "$filename.exe" && & ".\$filename.exe"
}
Set-Alias rcpp run-cpp






function run-java {
    param (
        [string]$file
    )
    javac $file && java ([System.IO.Path]::GetFileNameWithoutExtension($file))
}
Set-Alias rjava run-java

# Start Local PHP Server
function php-server {
    param (
        [int]$port = 8000
    )
    php -S 127.0.0.1:$port
}
Set-Alias phps php-server

# clean compiled files
function cleanCompiledFiles {
    Get-ChildItem -Path . -Include *.class,*.exe,*.obj,*.o,*.pyc -Recurse | Remove-Item -Force
}


# admin
function run-admin {
    param (
        [string]$script
    )
    Start-Process powershell -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File $script" -Verb RunAs
}

